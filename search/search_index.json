{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Interactive publishing","text":"<p>This is documentation page for Interactive-Publishing GitHub repository containing templates and tools for creating interactive figures and interactive text for publishing in EPUB3/HTML5.</p> <p>This simple page incorporates interactive figure and interactive text. For source and tools for creating your own interactive resources for publishing in HTML and EPUB3, please see repository. Created interactive elements can be incorporated in eBooks, blogs, web pages... or just uploaded online and shared with links.</p> How is this different compared to other widgets/interactive plots available? <p>This code strives to be as simple as possible, while providing key learning functionality. This means that generated plots are stand-alone web pages, with embedded minimal JavaScript code necessary for interactivity. For viewing interactive figures, no JavaScript is loaded from online, which means that everything can work in off-line environments. Also, no calculations are performed in the browser. Instead, everything is calculated, and interactive code just picks corrects static images. This ensures that assumed infrastructure can be dumb and very low performance. Goal is that it can work everywhere: from e-readers, to very old or very small computers.</p> <p>In short, in the words of Antoine de Saint-Exupery </p> <p>''A designer knows he has achieved perfection not when there is nothing left to add, but when there is nothing left to take away.''</p> <p>We tried to remove everything except minimum needed to achieve interactive learning. Focus is social outcome, not technological sophistication. Click here to see more on motivation and goals</p> How to use interactive figures in presentations or online? <p>Since created figures are stand-alone <code>.html</code> pages, standard <code>iframe</code> support for embedding WebPages (remote or local <code>.html</code> files) in popular presentation  making software solutions is one way. Same goes if you want to embed them on your web-pages and blog posts.</p> <p>We do recommend also to checkout  Caroline, open-source Python framework for quick and simple creation of HTML presentations, that not only offers native support for inclusion of interactive figures, but also host of other features (including interaction with audience).</p>"},{"location":"#getting-started","title":"Getting started","text":"<pre><code>pip install interactive-publishing\n</code></pre> <p>Optional dependancy is LaTeX, that should be installed on the system and available on command line interface for annotations.</p>"},{"location":"#examples","title":"Examples","text":""},{"location":"#interactive-text","title":"Interactive text","text":"<p>Standalone interactive text can be seen here or as a part of the page bellow. Purple elements can be changed by dragging or clicking, updating  calculated values given in green.</p>"},{"location":"#interactive-figure","title":"Interactive figure","text":"<p>Standalone interactive figure can be seen here  or as a part of the page bellow.</p> <p>Try creating your own interactive texts and figures for science teaching and public communication. You can start by using templates from  Interactive-Publishing repository.</p>"},{"location":"#interactive-timeline","title":"Interactive timeline","text":"<p>Click to see example</p>"},{"location":"#domain-packages","title":"Domain packages","text":"<p>We provide some extensions useful for specific domains, in particular quantum physics and atomic, molecular and optical (AMO) physics for visualising quantum states and quantum dynamics. For more details see here.</p>"},{"location":"example_gallery/","title":"Example gallery","text":""},{"location":"example_gallery/#university-level-teaching","title":"University-level teaching","text":"<p>The university-level examples of use of this library are</p> <ul> <li>Rydberg Physics, Nikola \u0160ibali\u0107 and Charles S Adams, IOP Publishing (2018)</li> <li>Optics f2f code book, showing examples from Optics f2f: From Fourier to Fresnel, Charles S. Adams and Ifan G. Hughes (2018)</li> <li>An example of physics blogpost incorporating interactive figures can be found here.</li> <li>An Interactive Guide to Quantum Optics, Nikola \u0160ibali\u0107 and C Stuart Adams, IOP Publishing (2024)</li> </ul>"},{"location":"example_gallery/#motivation-and-goals","title":"Motivation and goals","text":"<p>The practical motivation for use of interactivity in teaching, science communication and policy discussions is presented at</p> <ul> <li>Do interactive figures help physicists to communicate their science?, Nikola \u0160ibali\u0107, Physics World blog (2019) </li> <li>Learning through interacting, Nikola \u0160ibali\u0107, Phys. World 32 (5) 21 (2019)</li> </ul>"},{"location":"ifigures_api/","title":"API Documentation","text":"<p>Why use interactive figure?</p> <p>This is discussed in Physics World blogpost and comment. In short, we want to allow exploration of many untold stories and edge cases. To build intuition, connections and maybe get inspired for further work!</p> <p>Simple interactive figure</p> <p><pre><code>from ifigures import InteractiveFigure, RangeWidget, RangeWidgetViridis, RadioWidget,DropDownWidget\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef plot(amplitude, omega, time, color, f):\n    fig, ax = plt.subplots(figsize=(8, 4))\n    x = np.linspace(0, 10, 1000)\n    if f==\"sin\":\n        func = np.sin\n    else:\n        func = np.cos\n    ax.plot(x, amplitude * func(omega*x), color=color,\n            lw=5, alpha=0.4)\n    ax.set_xlim(0, 10)\n    ax.set_ylim(-1.1, 1.1)\n    ax.set_xlabel(r\"Time, $t$\")\n    ax.set_ylabel(r\"$f(t)$\")\n    ax.set_title(\"Figure title. f(x) = amplitude * %s(omega*x)\"\n                % (f))\n    ax.axvspan(time-0.1, time+0.1, color=\"0.9\")\n\n    caption = \"Figure caption. Amplitude = %.2f, omega = %.2f, color = %s, f(t) = amplitude * %s(omega*x). Highlighted time = %.2f\" % (amplitude, omega, color, f, time)\n    return (fig, caption)\n\n\nfigure_example1 = InteractiveFigure(plot,\n            amplitude=RangeWidget(0.1, 0.9, 0.4),\n            omega=RangeWidget(1.0, 5.01, 2.0),\n            time=RangeWidgetViridis(1,9,4),\n            color=RadioWidget(['blue', 'green', 'red']),\n            f=DropDownWidget([\"sin\",\"cos\"]))\nfigure_example1.saveStandaloneHTML(\"interactive_figure.html\")\n</code></pre> The above code generates</p> <p></p> <p>Saving static version for printing</p> <p>Even when we create interactive figures, sometimes we do need to provide also printed option. This can be easily done with <code>saveStaticFigure</code> method, which we demonstrate on the previous example <pre><code>from ifigures import InteractiveFigure, RangeWidget, RangeWidgetViridis, RadioWidget,DropDownWidget\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef plot(amplitude, omega, time, color, f):\n    fig, ax = plt.subplots(figsize=(8, 4))\n    x = np.linspace(0, 10, 1000)\n    if f==\"sin\":\n        func = np.sin\n    else:\n        func = np.cos\n    ax.plot(x, amplitude * func(omega*x), color=color,\n            lw=5, alpha=0.4)\n    ax.set_xlim(0, 10)\n    ax.set_ylim(-1.1, 1.1)\n    ax.set_xlabel(r\"Time, $t$\")\n    ax.set_ylabel(r\"$f(t)$\")\n    ax.set_title(\"Figure title. f(x) = amplitude * %s(omega*x)\"\n                % (f))\n    ax.axvspan(time-0.1, time+0.1, color=\"0.9\")\n\n    caption = \"Figure caption. Amplitude = %.2f, omega = %.2f, color = %s, f(t) = amplitude * %s(omega*x). Highlighted time = %.2f\" % (amplitude, omega, color, f, time)\n    return (fig, caption)\n\n\nfigure_example1 = InteractiveFigure(plot,\n            amplitude=RangeWidget(0.1, 0.9, 0.4),\n            omega=RangeWidget(1.0, 5.01, 2.0),\n            time=RangeWidgetViridis(1,9,4),\n            color=RadioWidget(['blue', 'green', 'red']),\n            f=DropDownWidget([\"sin\",\"cos\"]))\nfigure_example1.saveStaticFigure(\"test.png\",\n                                [[0.5,1,1.5,\"red\",\"sin\"],[0.5,3,1.6,\"blue\",\"sin\"],\n                                [0.5,1,1.5,\"red\",\"cos\"],[0.5,3,1.6,\"blue\",\"cos\"]])\nprint(figure_example1.overallCaption)\n</code></pre> </p> <p><code>(a) Amplitude = 0.50, omega = 1.00, color = red, f(t) = amplitude * sin(omega*x). Highlighted time = 1.50, (b) Amplitude = 0.50, omega = 3.00, color = blue, f(t) = amplitude * sin(omega*x). Highlighted time = 1.60, (c) Amplitude = 0.50, omega = 1.00, color = red, f(t) = amplitude * cos(omega*x). Highlighted time = 1.50, (d) Amplitude = 0.50, omega = 3.00, color = blue, f(t) = amplitude * cos(omega*x). Highlighted time = 1.60</code></p>"},{"location":"ifigures_api/#ifigures.InteractiveFigure","title":"<code>ifigures.InteractiveFigure(function, **kwargs)</code>","text":"<p>Interactive Figure Object</p> <p>Parameters:</p> <ul> <li> <code>function</code>             (<code>Callable[..., (figure, str)]</code>)         \u2013          <p>Callable function that returns matplotlib figure and caption and accepts same arguments as kwargs defined through Interactive Figure Input Controls</p> </li> <li> <code>kwargs</code>         \u2013          <p>keyword arguments that accept Interactive Figure input controls</p> </li> </ul>"},{"location":"ifigures_api/#ifigures.InteractiveFigure.saveStandaloneHTML","title":"<code>saveStandaloneHTML(fileName, compress=False)</code>","text":"<p>Saves interactive figure as stand alone HTML file</p> <p>Parameters:</p> <ul> <li> <code>fileName</code>             (<code>str</code>)         \u2013          <p>test</p> </li> <li> <code>compress</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>test. Defaults to False.</p> </li> </ul>"},{"location":"ifigures_api/#ifigures.InteractiveFigure.saveStaticFigure","title":"<code>saveStaticFigure(fileName, values=None, figuresPerRow=2, labelPanels=True, dpi=300, labelSize=10, labelOffset=(10, 10), labelGenerator=None, compress=False)</code>","text":"<p>Saves static figure as specified file </p> <p>Parameters:</p> <ul> <li> <code>fileName</code>             (<code>str</code>)         \u2013          <p>filename with extension (e.g. <code>example.png</code>).</p> </li> <li> <code>values</code>             (<code>List[List]</code>, default:                 <code>None</code> )         \u2013          <p>List of Lists of arguments. For each one static panel will be created. If not specified will use all the values provided by the Input widgets.</p> </li> <li> <code>figuresPerRow</code>             (<code>int</code>, default:                 <code>2</code> )         \u2013          <p>Number of panels per final figure row.</p> </li> <li> <code>labelPanels</code>             (<code>bool</code>, default:                 <code>True</code> )         \u2013          <p>Should we label panels with <code>(a), (b), ...</code></p> </li> <li> <code>dpi</code>             (<code>int</code>, default:                 <code>300</code> )         \u2013          <p>resolution in dots per inch.</p> </li> <li> <code>labelSize</code>             (<code>int</code>, default:                 <code>10</code> )         \u2013          <p>Label size for individual panels</p> </li> <li> <code>labelOffset</code>             (<code>tuple</code>, default:                 <code>(10, 10)</code> )         \u2013          <p>Offset position of label.</p> </li> <li> <code>labelGenerator</code>             (<code>_type_</code>, default:                 <code>None</code> )         \u2013          <p>description.</p> </li> <li> <code>compress</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Should we use pngquant to compress final figure.</p> </li> </ul>"},{"location":"ifigures_api/#ifigures.InteractiveFigure.show","title":"<code>show(width=800, height=700)</code>","text":"<p>Shows static png or interactive html figure in Jupyter notebook</p> <p>Parameters:</p> <ul> <li> <code>width</code>             (<code>int</code>, default:                 <code>800</code> )         \u2013          <p>IFrame width in pixels.</p> </li> <li> <code>height</code>             (<code>int</code>, default:                 <code>700</code> )         \u2013          <p>IFrame height in pixels.</p> </li> </ul> <p>Returns:</p> <ul> <li>         \u2013          <p>IPython.display.IFrame: IFrame containing generated interactive figure</p> </li> </ul>"},{"location":"ifigures_api/#input-controls-for-interactive-figures","title":"Input controls for interactive figures","text":"<p>Inputs for interactive figures are range sliders (including specially coloured <code>RangeWidgetViridis</code> that we use extensively to mark time evolution in dynamics), drop-down select boxes, and radio buttons, in some combination.</p> <p>Example: a static snapshot of input control widget</p> <p></p> <p>Example: a static snapshot of input control widget</p> <p></p> <p>Example: a static snapshot of input control widget</p> <p></p> <p>Example: a static snapshot of input control widget</p> <p></p>"},{"location":"ifigures_api/#ifigures.RangeWidget","title":"<code>ifigures.RangeWidget(min, max, step=1, name=None, default=None, width=350, divclass=None, show_range=False)</code>","text":"<p>Range (slider) widget</p> <p>Parameters:</p> <ul> <li> <code>min</code>             (<code>float</code>)         \u2013          <p>starting value for input value range</p> </li> <li> <code>max</code>             (<code>float</code>)         \u2013          <p>end value for input value range</p> </li> <li> <code>step</code>             (<code>float</code>, default:                 <code>1</code> )         \u2013          <p>step size for input value range.</p> </li> <li> <code>name</code>             (<code>_type_</code>, default:                 <code>None</code> )         \u2013          <p>description.</p> </li> <li> <code>default</code>             (<code>_type_</code>, default:                 <code>None</code> )         \u2013          <p>description.</p> </li> <li> <code>width</code>             (<code>int</code>, default:                 <code>350</code> )         \u2013          <p>description.</p> </li> <li> <code>divclass</code>             (<code>_type_</code>, default:                 <code>None</code> )         \u2013          <p>description.</p> </li> <li> <code>show_range</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>description.</p> </li> </ul>"},{"location":"ifigures_api/#ifigures.RangeWidgetViridis","title":"<code>ifigures.RangeWidgetViridis(min, max, step=1, name=None, default=None, width=350, divclass=None, show_range=False)</code>","text":"<p>Range (slider) widget that has viridis colourbar on background. Useful for special parameter, e.g. time.</p> <p>Parameters:</p> <ul> <li> <code>min</code>             (<code>float</code>)         \u2013          <p>starting value for input value range</p> </li> <li> <code>max</code>             (<code>float</code>)         \u2013          <p>end value for input value range</p> </li> <li> <code>step</code>             (<code>float</code>, default:                 <code>1</code> )         \u2013          <p>step size for input value range.</p> </li> <li> <code>name</code>             (<code>_type_</code>, default:                 <code>None</code> )         \u2013          <p>description.</p> </li> <li> <code>default</code>             (<code>_type_</code>, default:                 <code>None</code> )         \u2013          <p>description.</p> </li> <li> <code>width</code>             (<code>int</code>, default:                 <code>350</code> )         \u2013          <p>description.</p> </li> <li> <code>divclass</code>             (<code>_type_</code>, default:                 <code>None</code> )         \u2013          <p>description. </p> </li> <li> <code>show_range</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>description.</p> </li> </ul>"},{"location":"ifigures_api/#ifigures.RadioWidget","title":"<code>ifigures.RadioWidget(values, name=None, labels=None, default=None, divclass=None, delimiter='      ')</code>","text":"<p>Radio button widget</p> <p>Parameters:</p> <ul> <li> <code>values</code>             (<code>List[str]</code>)         \u2013          <p>input option values</p> </li> <li> <code>name</code>             (<code>_type_</code>, default:                 <code>None</code> )         \u2013          <p>description. </p> </li> <li> <code>labels</code>             (<code>List[str]</code>, default:                 <code>None</code> )         \u2013          <p>description. </p> </li> <li> <code>default</code>             (<code>_type_</code>, default:                 <code>None</code> )         \u2013          <p>description.</p> </li> <li> <code>divclass</code>             (<code>_type_</code>, default:                 <code>None</code> )         \u2013          <p>description. </p> </li> <li> <code>delimiter</code>             (<code>str</code>, default:                 <code>'      '</code> )         \u2013          <p>description. .</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>description</p> </li> <li> <code>ValueError</code>           \u2013          <p>description</p> </li> </ul>"},{"location":"ifigures_api/#ifigures.DropDownWidget","title":"<code>ifigures.DropDownWidget(values, name=None, labels=None, default=None, divclass=None, delimiter='      ')</code>","text":"<p>Drop down widget.</p> <p>Parameters:</p> <ul> <li> <code>values</code>             (<code>List[type[str | float]]</code>)         \u2013          <p>drop down option values</p> </li> <li> <code>name</code>             (<code>_type_</code>, default:                 <code>None</code> )         \u2013          <p>description. </p> </li> <li> <code>labels</code>             (<code>List[str]</code>, default:                 <code>None</code> )         \u2013          <p>labels for drop down options. By default they are same as values.</p> </li> <li> <code>default</code>             (<code>_type_</code>, default:                 <code>None</code> )         \u2013          <p>description. </p> </li> <li> <code>divclass</code>             (<code>_type_</code>, default:                 <code>None</code> )         \u2013          <p>description. </p> </li> <li> <code>delimiter</code>             (<code>str</code>, default:                 <code>'      '</code> )         \u2013          <p>description.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>description</p> </li> <li> <code>ValueError</code>           \u2013          <p>description</p> </li> </ul>"},{"location":"ifigures_api/#interactive-timeline","title":"Interactive timeline","text":"<p>Why use timelines?</p> <p>Scientific progress is huge community effort, often undertaken over many decades. Our timelines also have thickness since we recognize the importance of cross-breeding of ideas and insights from different \"rivers\" of thought and experimentation. Timeline format allows readers to explore and understand all the connection in historical development.</p> <p>Timeline for development of electromagnetism</p> <p>See example here.</p>"},{"location":"ifigures_api/#ifigures.InteractiveTimeline","title":"<code>ifigures.InteractiveTimeline(startYear=1900, endYear=2020, clickMarker=None, backgroundImage=None, title='', introText='&lt;p&gt;&lt;b&gt;Interactive timeline&lt;/b&gt;: To explore events &lt;span class=\"interactivecolor\"&gt;&lt;b&gt;click on circles&lt;/b&gt;&lt;/span&gt;.&lt;/p&gt;', introImage=None, introCredits='', compress=False)</code>","text":"<p>Parameters:</p> <ul> <li> <code>compress</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>if True will try to compress all images uses pngquant. For this pngquant command on command line has to exist.</p> </li> </ul>"},{"location":"ifigures_api/#ifigures.InteractiveTimeline.addEvent","title":"<code>addEvent(year, title, text, image=None, credits='', offsetY=0)</code>","text":"<p>Adds event to the timeline</p> <p>Parameters:</p> <ul> <li> <code>year</code>             (<code>int</code>)         \u2013          <p>description</p> </li> <li> <code>title</code>             (<code>str</code>)         \u2013          <p>description</p> </li> <li> <code>text</code>             (<code>str</code>)         \u2013          <p>description</p> </li> <li> <code>image</code>             (<code>_type_</code>, default:                 <code>None</code> )         \u2013          <p>description. Defaults to None.</p> </li> <li> <code>credits</code>             (<code>str</code>, default:                 <code>''</code> )         \u2013          <p>description. Defaults to \"\".</p> </li> <li> <code>offsetY</code>             (<code>int</code>, default:                 <code>0</code> )         \u2013          <p>description. Defaults to 0.</p> </li> </ul>"},{"location":"ifigures_api/#ifigures.InteractiveTimeline.saveStandaloneHTML","title":"<code>saveStandaloneHTML(fileName)</code>","text":"<p>summary</p> <p>Parameters:</p> <ul> <li> <code>fileName</code>             (<code>str</code>)         \u2013          <p>description</p> </li> </ul>"},{"location":"ifigures_api/#ifigures.InteractiveTimeline.saveStaticFigure","title":"<code>saveStaticFigure(folderName)</code>","text":"<p>summary</p> <p>Parameters:</p> <ul> <li> <code>folderName</code>             (<code>str</code>)         \u2013          <p>description</p> </li> </ul>"},{"location":"ifigures_api/#annotation-features-for-matplotlib-plots","title":"Annotation features for Matplotlib plots","text":"<p>Example of annotations</p> <p><pre><code>import numpy as np\nimport matplotlib.pyplot as plt\nfrom ifigures import *\nfrom ifigures.style import *  # for color scheme\n\nfig, ax=plt.subplots(1,1,figsize=(3*1.6, 3))\n\nsome_data = np.linspace(0,8,100)\n\nax.plot(some_data, some_data, \"-\", color=cDUb)\nax.plot(some_data, np.sqrt(some_data)+1.23, \"-\", color=cDUr)\nxAnnotate(ax, 0.5, 5.5, color=cDUy)\nblobAnnotate(ax,6,6, 6.5,1,\"Nothing! $\\Omega_2$\", color=cDUggg)\nblobAnnotate(ax,3,3, 4,1,\"Something\", color=cDUbb, blobSize=100)\n\nplt.show()\n</code></pre> produces </p> <p></p> <p>Why should one use annotations?</p> <p>Modern figures in reserach papers are often dense with information, and presume substantial previous knowledge in order to be able to focus the sight on few actually relevant and interesting points. When working with interactive figures we are not bound to one \"dead\" version of plot on the paper, but can show multiple layers of annotations to help final knowledge consumers digest important features first, guiding their focus in interpretation gently. More widely, teaching plot literacy to wider population is crucial for informed decision-making.</p>"},{"location":"ifigures_api/#ifigures.blobAnnotate","title":"<code>ifigures.blobAnnotate(axis, blobX, blobY, textX, textY, text, blobSize=100, linewidth=3, fontsize=12, color=cDUbb, curvatureSign='+', zorder=-1)</code>","text":"<p>Cartoon style blob annotation to highlight different parts of plot.</p> <p>Parameters:</p> <ul> <li> <code>axis</code>         \u2013          <p>figure axis where we do blob annotation</p> </li> <li> <code>blobX</code>             (<code>float) </code>)         \u2013          <p>X position of blob highlight on axis</p> </li> <li> <code>blobY</code>             (<code>float) </code>)         \u2013          <p>Y position of blob highlight on axis</p> </li> <li> <code>textX</code>             (<code>float) </code>)         \u2013          <p>X position of corresponding annotation</p> </li> <li> <code>textY</code>             (<code>float) </code>)         \u2013          <p>Y position of corresponding annotation</p> </li> <li> <code>text</code>             (<code>string) </code>)         \u2013          <p>annotation</p> </li> </ul>"},{"location":"ifigures_api/#ifigures.xAnnotate","title":"<code>ifigures.xAnnotate(axis, fromX, toX, color=cDUy, zorder=-2)</code>","text":"<p>summary</p> <p>Parameters:</p> <ul> <li> <code>axis</code>             (<code>_type_</code>)         \u2013          <p>description</p> </li> <li> <code>fromX</code>             (<code>_type_</code>)         \u2013          <p>description</p> </li> <li> <code>toX</code>             (<code>_type_</code>)         \u2013          <p>description</p> </li> <li> <code>color</code>             (<code>_type_</code>, default:                 <code>cDUy</code> )         \u2013          <p>description. Defaults to cDUy.</p> </li> <li> <code>zorder</code>             (<code>int</code>, default:                 <code>-2</code> )         \u2013          <p>description. Defaults to -2.</p> </li> </ul>"},{"location":"ifigures_api/#ifigures.yAnnotate","title":"<code>ifigures.yAnnotate(axis, fromY, toY, color=cDUy, zorder=-2)</code>","text":"<p>summary</p> <p>Parameters:</p> <ul> <li> <code>axis</code>             (<code>_type_</code>)         \u2013          <p>description</p> </li> <li> <code>fromY</code>             (<code>_type_</code>)         \u2013          <p>description</p> </li> <li> <code>toY</code>             (<code>_type_</code>)         \u2013          <p>description</p> </li> <li> <code>color</code>             (<code>_type_</code>, default:                 <code>cDUy</code> )         \u2013          <p>description. Defaults to cDUy.</p> </li> <li> <code>zorder</code>             (<code>int</code>, default:                 <code>-2</code> )         \u2013          <p>description. Defaults to -2.</p> </li> </ul>"},{"location":"ifigures_api/#ifigures.equation","title":"<code>ifigures.equation(latex, axis, fontsize=10, dpi=100, border=[4, 4, 4, 4], debug=False, x=0.1, y=1)</code>","text":"<p>Adds equations on the given axis plot (and turns off axis).</p> <p>Parameters:</p> <ul> <li> <code>latex</code>             (<code>_type_</code>)         \u2013          <p>description</p> </li> <li> <code>axis</code>             (<code>_type_</code>)         \u2013          <p>description</p> </li> <li> <code>fontsize</code>             (<code>int</code>, default:                 <code>10</code> )         \u2013          <p>description. Defaults to 10.</p> </li> <li> <code>dpi</code>             (<code>int</code>, default:                 <code>100</code> )         \u2013          <p>description. Defaults to 100.</p> </li> <li> <code>border</code>             (<code>list</code>, default:                 <code>[4, 4, 4, 4]</code> )         \u2013          <p>description. Defaults to [4,4,4,4].</p> </li> <li> <code>debug</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>description. Defaults to False.</p> </li> <li> <code>x</code>             (<code>float</code>, default:                 <code>0.1</code> )         \u2013          <p>description. Defaults to 0.1.</p> </li> <li> <code>y</code>             (<code>int</code>, default:                 <code>1</code> )         \u2013          <p>description. Defaults to 1.</p> </li> </ul>"},{"location":"ifigures_api/#additional-latex-commands","title":"Additional LaTeX commands","text":"<p>Some special commands are defined by default for use in equation environment</p> <ul> <li><code>\\ketbra{A,B}</code> results in \\(| A \\rangle\\langle B |\\)</li> <li><code>\\braket{A,B}</code> results in \\(\\langle A | B \\rangle\\)</li> <li>Highlighting: parts of equation can be higlighted in purple <code>\\hp{...}</code>, yellow <code>\\hy{...}</code>, blue <code>\\hb{...}</code>, gray <code>\\hg{...}</code>, darker gray <code>\\hgg{...}</code>, golden <code>\\ho{...}</code> and red background <code>\\hr{...}</code>.</li> <li>Frames: parts of the equation can be framed in purple <code>fp{...}</code>, blue <code>\\fb{...}</code>,   gray <code>\\fg{...}</code>, golden <code>\\fg{...}</code>, and red <code>fr{...}</code> frames.</li> </ul> <p>Example of equation with additional LaTeX commands</p> <p><pre><code>import matplotlib.pyplot as plt\nfrom ifigures import *\n\nfig, ax=plt.subplots(1,1)\n\nequation(r\"\"\"\n$\\begin{matrix} \\mathcal{H} &amp;=&amp; \\hy{\\frac{\\Omega_1}{2}}~ \\ketbra{e}{g}  +\\hr{ \\Omega_2/2}~ \\ketbra{e}{m} \\\\\n\\mathrm{highlight} &amp;:&amp; \\hp{\\textrm{hp}}~~~\\hy{\\textrm{hy}} ~~~\\hb{\\textrm{hb}} ~~~\\hg{\\textrm{hg}}\n~~~\\hgg{\\textrm{hgg}} ~~~\\ho{\\textrm{ho}}~~~\\hr{\\textrm{hr}} \\\\\n\\mathrm{frame}&amp; : &amp; \\fp{\\textrm{fp}}~~~\\fb{\\textrm{fb}}~~~ \\fg{\\textrm{fg}}~~~\\fo{\\textrm{fo}} ~~~\\fr{\\textrm{fr}}  \\end{matrix}$\n\"\"\", ax,  fontsize=12, debug=False, x=0.5, y=0.5, dpi=300)\n\nplt.show()\n</code></pre> results in</p> <p></p>"},{"location":"ifigures_api/#quantum-state-visualisations","title":"Quantum state visualisations","text":"<p>Mapping complex numbers to colors</p> <p> Mapping of complex number \\(A e^{i \\phi}\\) with amplitude \\(A\\) and phase \\(\\phi\\) to colours used by the library. Note that  complementary colours correspond to sign difference: green and red (like Italian flag), and yellow and blue. In the case the amplitude is zero, all colours are linearly approching white for amplitude \\(A \\rightarrow 0\\).</p> <p>Bloch sphere example</p> <p><pre><code>import numpy as np\nimport matplotlib.pyplot as plt\nfrom ifigures.amoplots import *\n\nfrom scipy.linalg import kron, eig\n\n\na = np.linspace(0,8,100)\n\nf = plt.figure(figsize=(6,8))\n\nax1 = plt.subplot(1,1,1)\n\ndef trajectory(gi):\n    G=gi*2.0 #input parameter\n    Omega=10.0\n    Delta=10.0\n    phiL=0.1*np.pi/2\n    H=np.array([[Delta/2, (Omega/2)*np.exp(-1.j*phiL)],[(Omega/2)*np.exp(1.j*phiL), -Delta/2] ])\n    I2=np.eye(2,2)\n    Hrho=kron(H,I2)\n    rhoH=kron(I2,np.conj(H))\n    L=np.array([[0,0,0,G],[0,-G/2,0,0],[0,0,-G/2,0],[0,0,0,-G] ])\n    evals, evecs = eig(-1.j*(Hrho-rhoH)+L)\n    evecs=np.mat(evecs)\n    rho0=np.zeros((4,1))\n    rho0[0]=1.0\n    npts=50\n    tmax=2*np.pi/np.sqrt(Omega**2+Delta**2)\n    t=np.linspace(0,tmax,npts)\n    u=np.zeros(npts)\n    v=np.zeros(npts)\n    w=np.zeros(npts)\n    for i in range(0,npts):\n        rho=evecs*np.mat(np.diag(np.exp(evals*t[i])))*np.linalg.inv(evecs)*rho0\n        u[i]=(rho[1]+rho[2]).real\n        v[i]=(1.j*(rho[1]-rho[2])).real\n        w[i]=(rho[0]-rho[3]).real\n    return np.column_stack((u, v, w))\n\nbs = BlochSphere()\nbs.addStateBlob(0,0,1)\ndynamics = trajectory(3)\nbs.addTrajectory(dynamics)\nbs.addStateBlob(0,0,1)\nbs.addStateBlob(*dynamics[-1,:])\nbs.addStateArrow(*dynamics[-1,:],)\nbs.plot(axis=ax1)\n</code></pre> </p> <p>Example above shows Bloch sphere, with annotated key points of the sphere, state trajectory in time shown as line with time encoded in viridis gradient, state arrow, and two blobs highlighting in this case start and end of the evolution. We also notice how trajectory of the system departs the surface of the Bloch sphere and dives into inside due to decoherence. Note that actual Bloch sphere plot is only last few lines of code, the rest is calculation of dynamics.</p> <p>Densitry matrix visualisation</p> <p><pre><code>import matplotlib.pyplot as plt\nfrom ifigures.amoplots import *\n\nfig, ax=plt.subplots(1,1,figsize=(3, 3))\n\ndm = DensityMatrix()\ndm.plot(ax, [[1/2, 1j/2], [-1j/2, -1/2]])\n\nplt.show()\n</code></pre> </p> <p>Why use coloured density matrixes</p> <p>They are capable of quickly conveying numerical results, arguably providing better grasp of underlying physics than 3D bar charts. And of course they work for multi-level systems.</p> <p>Example</p> <pre><code>import matplotlib.pyplot as plt \nimport numpy as np\nfrom ifigures import *\nfrom ifigures.style import *\n\nfig, ax1=plt.subplots(1, 1, figsize=(3 * 1.6, 3))\n\n# Hamiltonian - driving\nomega_1 = np.pi/1.5\nomega_2 = np.pi * np.exp(1j * 0.5 * np.pi)\n\n# Current state in the basis defined in order given below\nstate = [1/np.sqrt(2), -1j/2, -1/2]\n\nel = EnergyLevels()\n# basis - energy levels and their relative positions\nel.add(r\"$|\\mathrm{g}\\rangle$\", 0, 0)    # |g&gt;\nel.add(r\"$|\\mathrm{m}\\rangle$\", 1, 2.9)  # |m&gt;\nel.add(r\"$|\\mathrm{e}\\rangle$\", 2, 0.2)  # |e&gt;\n\nel.addArrow(0,1,\"\",\n            strength=omega_1,\n            style=\"&lt;-&gt;\", color=\"red\")\nel.addArrow(1,2,\"\",\n            strength=omega_2,\n            style=\"&lt;-&gt;\")\n\nel.setState([1/np.sqrt(2), -1j/2,-1/2])\n\nel.plot(ax1)\n\n\nplt.savefig(\"test1.png\")\nplt.show()\n</code></pre> <p></p> <ul> <li>State blob with color and size correspond to phase and amplitude</li> <li>small gray dot on the blobs indicates phasor tip, to allow also for colour blind readout</li> <li>external arches correspond to rotation of the small amplitude contribution for amplitude going from lower to higher states, while inner circles arches correspond to rotation of the small amplitude contribution from higher states to lower states.</li> <li>diameter of arched driving connection, and strength of the corresponding arrow, for the drivings is proportional to relative strengths of driving.</li> </ul> <p>Why use this new energy level and state representation</p> <p>It can show features even in 2 level systems that are not visible on Bloch sphere. Equally it can be generalized to many level and multi-partite systems directly. Representation is such that it allows \"visual integration\" of coherent dynamics. E.g. it is possible to directly see not only destructive interference responsible for Electromagnetically Induced Transparency, but also understand importance of laser phase. For many examples check the An Interactive Guide to Quantum Optics, Nikola \u0160ibali\u0107 and C Stuart Adams, IOP Publishing (2024)</p>"},{"location":"ifigures_api/#ifigures.getComplexColor","title":"<code>ifigures.getComplexColor(complexNo, maxAmplitude)</code>","text":"<p>Get color for a complex numbers</p> <p>Represents phase as continuous colour wheel, and amplitude as intensity of color (zero amplitude = white color), with linear mapping in between.</p> <p>Parameters:</p> <ul> <li> <code>complexNo</code>             (<code>complex float</code>)         \u2013          <p>complex number</p> </li> <li> <code>maxAmplitude</code>             (<code>float</code>)         \u2013          <p>maximum amplitude in the data set we want to represent as colour mapped dots. This is used for normalizing color intensity, going from maximal saturation or <code>maxAmplitude</code> to white color for zero amplitude.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>List[float]</code>         \u2013          <p>List[float]: color as [red, green, blue, alpha]</p> </li> </ul>"},{"location":"ifigures_api/#ifigures.BlochSphere","title":"<code>ifigures.BlochSphere(r=3, resolution=3)</code>","text":"<p>Utilities for plotting Bloch Sphere</p> <p>Parameters:</p> <ul> <li> <code>r</code>             (<code>int</code>, default:                 <code>3</code> )         \u2013          <p>description. Defaults to 3.</p> </li> <li> <code>resolution</code>             (<code>int</code>, default:                 <code>3</code> )         \u2013          <p>description. Defaults to 3.</p> </li> </ul>"},{"location":"ifigures_api/#ifigures.BlochSphere.addStateArrow","title":"<code>addStateArrow(x, y, z, color=cDUbbbb)</code>","text":"<p>Adds state arrow to the Bloch sphere, given the tip position.</p> <p>Parameters:</p> <ul> <li> <code>x</code>             (<code>_type_</code>)         \u2013          <p>description</p> </li> <li> <code>y</code>             (<code>_type_</code>)         \u2013          <p>description</p> </li> <li> <code>z</code>             (<code>_type_</code>)         \u2013          <p>description</p> </li> <li> <code>color</code>             (<code>_type_</code>, default:                 <code>cDUbbbb</code> )         \u2013          <p>description. Defaults to cDUbbbb.</p> </li> </ul>"},{"location":"ifigures_api/#ifigures.BlochSphere.addStateBlob","title":"<code>addStateBlob(x, y, z, color=cDUrr, radius=0.2)</code>","text":"<p>Adds highlighted Blob on or inside the Bloch sphere.</p> <p>Parameters:</p> <ul> <li> <code>x</code>             (<code>_type_</code>)         \u2013          <p>description</p> </li> <li> <code>y</code>             (<code>_type_</code>)         \u2013          <p>description</p> </li> <li> <code>z</code>             (<code>_type_</code>)         \u2013          <p>description</p> </li> <li> <code>color</code>             (<code>_type_</code>, default:                 <code>cDUrr</code> )         \u2013          <p>description. Defaults to cDUrr.</p> </li> <li> <code>radius</code>             (<code>float</code>, default:                 <code>0.2</code> )         \u2013          <p>description. Defaults to 0.2.</p> </li> </ul>"},{"location":"ifigures_api/#ifigures.BlochSphere.addTrajectory","title":"<code>addTrajectory(trajectoryXYZ)</code>","text":"<p>Adds trajectory in t, with t shown with viridis colouring.</p> <p>Parameters:</p> <ul> <li> <code>trajectoryXYZ</code>             (<code>_type_</code>)         \u2013          <p>description</p> </li> </ul>"},{"location":"ifigures_api/#ifigures.BlochSphere.plot","title":"<code>plot(axis=None, debug=False, cameraPosition=[(12.2, 4.0, 4.0), (0.0, 0.0, 0.0), (0.0, 0.0, 1)], labelAxis=True, labelSize=12, dpi=100, label=['$|g\\\\rangle$', '$|\\\\rm e\\\\rangle$', '$\\\\frac{|\\\\rm g\\\\rangle+|\\\\rm e\\\\rangle}{\\\\sqrt{2}}$', '$\\\\frac{|\\\\rm g\\\\rangle+i|\\\\rm e\\\\rangle}{\\\\sqrt{2}}$'], labelOffset=None)</code>","text":"<p>Plots Bloch sphere on the given axis.</p> <p>Parameters:</p> <ul> <li> <code>axis</code>             (<code>_type_</code>, default:                 <code>None</code> )         \u2013          <p>description. Defaults to None.</p> </li> <li> <code>debug</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>description. Defaults to False.</p> </li> <li> <code>cameraPosition</code>             (<code>list</code>, default:                 <code>[(12.2, 4.0, 4.0), (0.0, 0.0, 0.0), (0.0, 0.0, 1)]</code> )         \u2013          <p>description. Defaults to [(12.2, 4.0, 4.0), (0.0, 0.0, 0.0), (0.0, 0.0, 1)].</p> </li> <li> <code>labelAxis</code>             (<code>bool</code>, default:                 <code>True</code> )         \u2013          <p>description. Defaults to True.</p> </li> <li> <code>labelSize</code>             (<code>int</code>, default:                 <code>12</code> )         \u2013          <p>description. Defaults to 12.</p> </li> <li> <code>dpi</code>             (<code>int</code>, default:                 <code>100</code> )         \u2013          <p>description. Defaults to 100.</p> </li> <li> <code>label</code>             (<code>list</code>, default:                 <code>['$|g\\\\rangle$', '$|\\\\rm e\\\\rangle$', '$\\\\frac{|\\\\rm g\\\\rangle+|\\\\rm e\\\\rangle}{\\\\sqrt{2}}$', '$\\\\frac{|\\\\rm g\\\\rangle+i|\\\\rm e\\\\rangle}{\\\\sqrt{2}}$']</code> )         \u2013          <p>description. Defaults to [r\"\\(|e\\rangle\\)\", r\"\\(|g\\rangle\\)\", r\"\\(\\frac{|e\\rangle+|g\\rangle}{\\sqrt{2}}\\)\", r\"\\(\\frac{|e\\rangle+i|g\\rangle}{\\sqrt{2}}\\)\" ].</p> </li> <li> <code>labelOffset</code>             (<code>_type_</code>, default:                 <code>None</code> )         \u2013          <p>description. Defaults to None.</p> </li> </ul>"},{"location":"ifigures_api/#ifigures.DensityMatrix","title":"<code>ifigures.DensityMatrix(with_grid=True)</code>","text":"<p>Color mapping of Density Matrix</p> <p>Parameters:</p> <ul> <li> <code>with_grid</code>             (<code>bool</code>, default:                 <code>True</code> )         \u2013          <p>description. Defaults to True.</p> </li> </ul>"},{"location":"ifigures_api/#ifigures.DensityMatrix.plot","title":"<code>plot(axis, rho, visualise='with dots')</code>","text":"<p>summary</p> <p>Parameters:</p> <ul> <li> <code>axis</code>             (<code>axis</code>)         \u2013          <p>description</p> </li> <li> <code>rho</code>             (<code>_type_</code>)         \u2013          <p>description</p> </li> <li> <code>visualise</code>             (<code>str</code>, default:                 <code>'with dots'</code> )         \u2013          <p>description. Defaults to \"with dots\".</p> </li> </ul>"},{"location":"ifigures_api/#ifigures.EnergyLevels","title":"<code>ifigures.EnergyLevels()</code>","text":"<p>Generates energy level diagram with annotation.</p>"},{"location":"ifigures_api/#ifigures.EnergyLevels.add","title":"<code>add(label, locationX, locationY, color='k')</code>","text":"<p>Adds energy level</p> <p>Parameters:</p> <ul> <li> <code>label</code>             (<code>str</code>)         \u2013          <p>label of the energy level</p> </li> <li> <code>locationX</code>             (<code>float</code>)         \u2013          <p>center position on plot axis</p> </li> <li> <code>locationY</code>             (<code>float</code>)         \u2013          <p>center position on plot axis</p> </li> </ul>"},{"location":"ifigures_api/#ifigures.EnergyLevels.addArrow","title":"<code>addArrow(fromStateIndex, toStateIndex, label='', style='&lt;-&gt;', color='k', strength=1, detuning=None)</code>","text":"<p>Adds arrow to the energy level diagram.</p> <p>Parameters:</p> <ul> <li> <code>fromStateIndex</code>             (<code>int</code>)         \u2013          <p>index of the first state</p> </li> <li> <code>toStateIndex</code>             (<code>int</code>)         \u2013          <p>index of the second state it points to</p> </li> <li> <code>style</code>             (<code>string</code>, default:                 <code>'&lt;-&gt;'</code> )         \u2013          <p>style of arrow, accepted values are '&lt;-', '-&gt;' or '&lt;-&gt;' . Default is '&lt;-&gt;'</p> </li> <li> <code>detuning</code>             (<code>float</code>, default:                 <code>None</code> )         \u2013          <p>None by default. Or  (relativeValue, \"label\") tuple</p> </li> </ul>"},{"location":"ifigures_api/#ifigures.EnergyLevels.clearState","title":"<code>clearState()</code>","text":"<p>Clears system state from the energy level diagram.</p>"},{"location":"ifigures_api/#ifigures.EnergyLevels.getTotalStates","title":"<code>getTotalStates()</code>","text":"<p>Total number of states on the energy level diagram.</p>"},{"location":"ifigures_api/#ifigures.EnergyLevels.plot","title":"<code>plot(axis, labels=True, linewidth=4, length=0.7, stateBlob=500, fontsize=14, arrowLabelSize=12, debug=False, dpi=100, drivingStrenghtToWidth=True, couplingBlob=0.3)</code>","text":"<p>Plots energy level digram on the given figure axis.</p> <p>Parameters:</p> <ul> <li> <code>linewidth</code>             (<code>float</code>, default:                 <code>4</code> )         \u2013          <p>energy level line width</p> </li> <li> <code>length</code>             (<code>float</code>, default:                 <code>0.7</code> )         \u2013          <p>energy level line length</p> </li> <li> <code>stateBlob</code>             (<code>flaot</code>, default:                 <code>500</code> )         \u2013          <p>maximum blob size for a system state, corresponding to the unit amplitude for the system to be in a given energy level</p> </li> <li> <code>drivingStrenghtToWidth</code>             (<code>bool</code>, default:                 <code>True</code> )         \u2013          <p>Should arrows correspond to driving strengths. True by default.</p> </li> <li> <code>debug</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>turns on and of plot axis, useful for precise positioning.</p> </li> </ul>"},{"location":"ifigures_api/#ifigures.EnergyLevels.setState","title":"<code>setState(state)</code>","text":"<p>Adds current state representation to level diagram.</p> <p>State will be represented as blobs of different sizes and colors plotted on corresponding energy levels. Blobs size correspond to the amplitude of that basis state in the total state, while their colour is mapped based on the complex colour wheel scheme defined in my_plots.</p> <p>Parameters:</p> <ul> <li> <code>state</code>         \u2013          <p>complex number array decomposing state in the basis of the previously added energy levels</p> </li> </ul>"}]}